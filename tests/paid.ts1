import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { Stake } from '../target/types/stake';
import { PublicKey } from "@solana/web3.js";
import { BN } from "bn.js";

describe("paid", () => {
  // Configure the client to use the local cluster.
  anchor.setProvider(anchor.AnchorProvider.env());

  const program = anchor.workspace.Stake as Program<Stake>;

  it("Is initialized!", async () => {
    // Add your test here.
    const rewardMint = new PublicKey("BTv6hmVttCpScjhoUCLdybskdDm6GDj69fX52JrF6Wak");
    const stakeMint = new PublicKey("9W6V5qTxSawTTyhybKGCp4pCH9MGejn4Gd5yfzfbBMxg");
    const appState = PublicKey.findProgramAddressSync(
      [
        anchor.utils.bytes.utf8.encode("app-state")
      ],
      program.programId
    )[0];
    const [authority, bump] = PublicKey.findProgramAddressSync(
      [
        anchor.utils.bytes.utf8.encode("authority"),
        appState.toBuffer()
      ],
      program.programId
    );
    const rewardPot = PublicKey.findProgramAddressSync(
      [
        anchor.utils.bytes.utf8.encode("reward-pot")
      ],
      program.programId
    )[0];

    const tx = await program.methods.initialize(
      new BN(100),
      6,
      6,
      false,
      bump
    ).accounts({
      rewardMint,
      stakeMint,
      appState,
      authority,
      rewardPot
    }).rpc();
    console.log("Your transaction signature", tx);
  });
});
